ALTER TABLE products
ALTER COLUMN product_name TYPE VARCHAR(100);

SELECT * FROM category;
SELECT * FROM customers;
SELECT * FROM inventory;
SELECT * FROM products;
SELECT * FROM orders;
SELECT * FROM sellers;
SELECT * FROM order_items;
SELECT * FROM payments;
SELECT * FROM shipping;

----------------------------------------

/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/

ALTER TABLE order_items
ADD COLUMN sales_value FLOAT;

UPDATE order_items
SET sales_value = quantity * price_per_unit;

WITH t1 AS
(SELECT p.product_id, product_name, SUM(quantity) total_quantity, 
ROUND(SUM(sales_value) :: NUMERIC,2) total_sales_value,
DENSE_RANK() OVER(ORDER BY ROUND(SUM(quantity * price_per_unit)::numeric,2) DESC) sales_rank
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY 1, 2)

SELECT product_name, total_quantity, total_sales_value, sales_rank  FROM t1
WHERE sales_rank < 11;


 
/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/

SELECT c.category_id, category_name, ROUND(SUM(sales_value)::NUMERIC, 2) total_revenue,
ROUND((SUM(sales_value) /( SELECT SUM(sales_value) FROM order_items)*100)::NUMERIC, 2) percent_of_total_sales
FROM order_items oi
JOIN  products p ON p.product_id = oi.product_id
JOIN category c ON c.category_id = p.category_id
GROUP BY 1, 2
ORDER BY 1


/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/

WITH t1 AS
(SELECT o.customer_id, o.order_id,
ROUND(SUM(sales_value)::NUMERIC,2) sales_value_per_order 
FROM order_items oi
JOIN orders o ON oi.order_id = o.order_id
GROUP BY 1,2
ORDER BY 1,2)

SELECT c.customer_id, first_name, last_name,
ROUND(AVG(sales_value_per_order), 2) avg_order_value,
COUNT(*) no_of_orders
FROM t1
JOIN customers c ON t1.customer_id = c.customer_id
GROUP BY 1,2,3
HAVING  COUNT(*) > 5
ORDER BY 1;


/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/

WITH t1 AS
(SELECT substring(order_date::TEXT from 1 for 7) month_year,
ROUND(SUM(sales_value)::NUMERIC,2) sales_value_per_month 
FROM order_items oi
JOIN orders o ON oi.order_id = o.order_id
WHERE order_date > (CURRENT_DATE - INTERVAL '1 year')::DATE 
GROUP BY 1 
ORDER BY 1)

SELECT month_year, sales_value_per_month AS current_month_sales,
LAG(sales_value_per_month) OVER(ORDER BY month_year) previous_month_sales,
ROUND(((sales_value_per_month / LAG(sales_value_per_month) OVER(ORDER BY month_year)) -1)*100, 2) percent_change
FROM t1


/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/

SELECT c.customer_id, first_name, last_name --CURRENT_DATE - reg_date
FROM customers c
LEFT JOIN orders o
ON o.customer_id = c.customer_id
WHERE order_id IS NULL


/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/

WITH t1 AS
(SELECT ct.category_id, category_name,  state, ROUND(SUM(sales_value)::NUMERIC,2) sales_value,
MIN(ROUND(SUM(sales_value)::NUMERIC,2)) OVER(PARTITION BY state)
FROM order_items oi
JOIN products p  ON p.product_id = oi.product_id
JOIN category ct ON ct.category_id = p.category_id
JOIN orders o    ON o.order_id = oi.order_id
JOIN customers c ON c.customer_id = o.customer_id
GROUP BY 1,2,3
ORDER BY 3,1)

SELECT category_name, state, sales_value FROM t1
WHERE sales_value = min


/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/

SELECT c.customer_id, first_name, last_name, ROUND(SUM(sales_value)::NUMERIC, 2) total_sales,
DENSE_RANK() OVER(ORDER BY SUM(sales_value) DESC)
FROM order_items oi
JOIN orders o    ON oi.order_id = o.order_id
JOIN customers c ON c.customer_id = o.order_id
GROUP BY 1,2,3 


/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/

SELECT p.product_id, product_name, stock, last_stock_date, warehouse_id
FROM inventory i
JOIN products p ON p.product_id = i.product_id
WHERE stock < 10


/*
9. Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/

SELECT c.customer_id, first_name, last_name, order_date, 
shipping_date - order_date days_to_ship, seller_name
FROM orders o
JOIN shipping s  ON s.order_id = o.order_id
JOIN customers c ON c.customer_id = o.customer_id
JOIN sellers sl  ON  sl.seller_id = o.seller_id
WHERE shipping_date - order_date > 3


/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/

SELECT payment_status, COUNT(*), 
ROUND((COUNT(*)/(SELECT  COUNT(*) FROM payments)::NUMERIC)*100,2 )
FROM payments
GROUP BY 1


/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/

SELECT s.seller_id, seller_name, ROUND(SUM(sales_value)::NUMERIC, 2) sales_value, 
COUNT(CASE WHEN order_status = 'Completed' THEN 'Successful' END) successful_orders,
COUNT(CASE WHEN order_status = 'Returned' OR order_status = 'Cancelled' THEN 'Failed' END) failed_orders,
ROUND((COUNT(CASE WHEN order_status = 'Completed' THEN 'Successful' END) /COUNT(*) ::NUMERIC)*100, 2) success_percent
FROM order_items oi
JOIN orders o ON oi.order_id = o.order_id
JOIN sellers s ON o.seller_id = s.seller_id
GROUP BY 1,2
ORDER BY 3 DESC
LIMIT 5


/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge:  Rank products by their profit margin, showing highest to lowest.
*/

SELECT p.product_id, product_name, ((1 - (cogs/price)::NUMERIC)*100) price_margin,
DENSE_RANK() OVER(ORDER BY (price - cogs)/price DESC)
FROM products p


/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/

SELECT p.product_id, product_name,
SUM(CASE WHEN order_status = 'Returned' THEN 1 ELSE 0 END) no_of_returns,
ROUND((SUM(CASE WHEN order_status = 'Returned' THEN 1 ELSE 0 END)/COUNT(*)::NUMERIC)*100, 2) return_percent
FROM orders o
JOIN order_items oi ON oi.order_id = o.order_id
JOIN products p 	ON p.product_id = oi.product_id
GROUP BY 1,2
ORDER BY 4 DESC
LIMIT 10


/*
14. Orders Pending Shipment
Find orders that have been paid but are still pending shipment.
Challenge: Include order details, payment date, and customer information.
*/

SELECT o.order_id, first_name, last_name, order_status, payment_date
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN payments p ON p.order_id = o.order_id
WHERE order_status = 'Inprogress'
AND payment_status = 'Payment Successed'


/*
15. Inactive Sellers
Identify sellers who havenâ€™t made any sales in the last 6 months.
Challenge: Show the last sale date and total sales from those sellers.
*/

SELECT s.seller_id, seller_name, MAX(order_date) last_sales_date, 
ROUND(SUM(sales_value)::NUMERIC, 2) total_sales
FROM orders o
JOIN sellers s      ON o.seller_id = s.seller_id
JOIN order_items oi ON oi.order_id = o.order_id
GROUP BY 1,2
HAVING MAX(order_date) < CURRENT_DATE - INTERVAL '6 months'


/*
16. IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/

WITH t1 AS
(SELECT c.customer_id, first_name, last_name,
SUM(CASE WHEN order_status = 'Returned' THEN 1 ELSE 0 END) no_of_returns,
COUNT(*) total_no_of_orders
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
GROUP BY 1,2,3)

SELECT customer_id, first_name || ' ' ||last_name AS customer_name,
CASE WHEN no_of_returns > 5 THEN 'returning' ELSE 'new'END customer_cateegory,
no_of_returns, total_no_of_orders
FROM t1


/*
17. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/


WITH t1 AS
(SELECT c.customer_id, first_name, last_name, state, COUNT(*) no_of_orders, 
ROUND(SUM(sales_value)::NUMERIC, 2) total_sales_value,
DENSE_RANK() OVER(PARTITION BY state ORDER BY COUNT(*) DESC) rank_
FROM order_items oi
JOIN orders o    ON oi.order_id = o.order_id
JOIN customers c ON c.customer_id = o.customer_id
GROUP BY 1,2,3,4)

SELECT * FROM t1
WHERE rank_ < 6


/*
18. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/

UPDATE shipping
SET delivery_status = TRIM(delivery_status);

SELECT shipping_providers, 
ROUND(SUM(sales_value)::NUMERIC, 2) total_revenue, 
COUNT(*) total_no_orders,
ROUND(AVG(CASE WHEN delivery_status = 'Delivered' THEN shipping_date - order_date END), 2) avg_delivery_time
FROM order_items oi
JOIN orders o   ON o.order_id = oi.order_id
JOIN shipping s ON s.order_id = o.order_id
GROUP BY 1;


/*
19. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result
Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/

WITH t1 AS
(SELECT p.product_id, product_name,category_id,
CASE WHEN EXTRACT('year' from order_date) = 2022 THEN 2022 ELSE 2023 END year_,
ROUND(SUM(sales_value)::NUMERIC, 2) total_sales
FROM order_items oi
JOIN orders o ON o.order_id = oi.order_id
JOIN products p ON p.product_id = oi.product_id
WHERE EXTRACT('year' from order_date) IN (2022,2023)
GROUP BY 1,2,3,4),

t2 AS
(SELECT product_id, product_name, c.category_id, category_name, total_sales AS year_2023,
LAG(total_sales) OVER(PARTITION BY product_id ORDER BY year_) year_2022,
ROUND(((total_sales/LAG(total_sales) OVER(PARTITION BY product_id ORDER BY year_)) - 1) *100, 2) diff_percent
FROM t1
JOIN category c ON c.category_id = t1.category_id)

SELECT * FROM t2 WHERE diff_percent IS NOT NULL
ORDER BY diff_percent 
LIMIT 10


-- STORED PROCEDURE
/*
Final Task
-- Store Procedure
create a function as soon as the product is sold the the same quantity should reduced from inventory table
after adding any sales records it should update the stock in the inventory table based on the product and qty purchased
-- 
*/


CREATE OR REPLACE PROCEDURE sales (i_product_id INT, i_order_id INT, i_order_item_id INT,
								   i_customer_id INT, i_seller_id INT,  i_quantity INT)
LANGUAGE plpgsql
AS
$$
DECLARE
v_count INT;
v_price FLOAT;
v_product_name VARCHAR(100);

BEGIN
SELECT price, product_name INTO v_price, v_product_name
FROM products
WHERE product_id = i_product_id;

SELECT COUNT(*) INTO v_count
FROM inventory
WHERE product_id = i_product_id AND stock > i_quantity;

IF v_count > 0 THEN
	INSERT INTO orders (order_id, order_date, customer_id, seller_id, order_status)
	VALUES (i_order_id, CURRENT_DATE, i_customer_id, i_seller_id, 'Inprogress');
	
	INSERT INTO order_items (order_item_id, order_id, product_id, quantity, price_per_unit, sales_value)
	VALUES (i_order_item_id, i_order_id, i_product_id, i_quantity, v_price, v_price * i_quantity);
	
	UPDATE inventory
	SET stock = stock - i_quantity
	WHERE product_id = i_product_id;
	
	RAISE NOTICE 'Sale of product has been updated';
	
ELSE
 	RAISE NOTICE 'Inadequate stock quantity';
END IF;
COMMIT;
END;
$$


CALL sales (5 ,25000, 25000, 500, 50, 35)














